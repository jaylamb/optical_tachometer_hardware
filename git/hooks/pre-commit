#!/usr/bin/env bash

# optical_tachometer_hardware

#  Copyright 2020 Jay Lamb, jaylamb@gmail.com
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#File: git/hooks/pre-commit
#Description: Pre-commit hook

function message()
{
	echo -n "$script_name: $1"
}

function error()
{
	>&2 echo "$script_name: $1"
}

function abort()
{
	if [[ "$#" -gt 0 ]]; then
		error "$1, aborting"
	fi

	exit 1
}

function display_help_text()
{
	echo "NAME"
	echo "	$script_name - Execute this repository's Git pre-commit hook."
	echo "SYNOPSIS"
	echo "	$script_name --help"
	echo "	$script_name"
	echo "OPTIONS"
	echo "	--help"
	echo "		Display this help text."
	echo "EXAMPLES"
	echo "	$script_name --help"
	echo "	$script_name"
}

function whitespace_error_check()
{
	message "Checking for whitespace errors ... "

	if ! git -C "$repository_dir" diff-index --check --cached  "$against" -- ':!:*.sch' >/dev/null 2>&1; then
		echo "fail"
		error "Aborting commit due to whitespace error(s). See below."
		git -C "$repository_dir" diff-index --check --cached "$against" -- ':!:*.sch'
		abort
	fi

		echo "pass"
}

function script_error_check()
{
	message "Checking for script errors ....... "

	mapfile -t scripts < <( find "$repository_dir" -executable -type f | sed '/sample/d' | sed '/utility/d' )

	if ! shellcheck --color=always --shell=bash "${scripts[@]}" >/dev/null 2>&1; then
		echo "fail"
		error "Aborting commit due to script error(s). See below."
		shellcheck -C always -s bash "${scripts[@]}"
		abort
	fi

	echo "pass"
}

function erc_error_check()
{
	message "Checking for ERC errors .......... "

    local -r build_dir="$repository_dir/build/"

    if [[ ! -d "$build_dir" ]]; then
        if ! mkdir -p "$build_dir" > "/dev/null" 2>&1; then
            echo "fail"
            error "Aborting commit due to build directory creation failure. See below."
            mkdir -p "$build_dir"
            abort
        fi
    fi

	mapfile -t schematics < <( find "$repository_dir" -name '*.sch' | sed '/utility/d' )

	if ! "$repository_dir/utility/KiAuto/src/eeschema_do" run_erc -w "${schematics[@]}" "${build_dir}" > "/dev/null" 2>&1; then
		echo "fail"
		error "Aborting commit due to ERC error(s). See below."
        cat "$build_dir"*.erc
		abort
	fi

	echo "pass"
}

function drc_error_check()
{
	message "Checking for DRC errors .......... "

    local -r build_dir="$repository_dir/build/"

    if [[ ! -d "$build_dir" ]]; then
        if ! mkdir -p "$build_dir" > "/dev/null" 2>&1; then
            echo "fail"
            error "Aborting commit due to build directory creation failure. See below."
            mkdir -p "$build_dir"
            abort
        fi
    fi

	mapfile -t layouts < <( find "$repository_dir" -name '*.kicad_pcb' | sed '/utility/d' )

	if ! "$repository_dir/utility/KiAuto/src/pcbnew_do" run_drc "${layouts[@]}" "${build_dir}" > "/dev/null" 2>&1; then
		echo "fail"
		error "Aborting commit due to DRC error(s). See below."
        cat "$build_dir"*.rpt
		abort
	fi

	echo "pass"
}

function main()
{
	script_dir=$( readlink -f "$0" ); readonly script_dir
	script_name=$( basename "$script_dir" ); readonly script_name
	hooks_dir=$( dirname "$script_dir" ); readonly hooks_dir
	repository_dir=$( readlink -f "$hooks_dir/../.." ); readonly repository_dir

	while [[ "$#" -gt 0 ]]; do
		local argument="$1"
		shift

		case "$argument" in
			--help)
				display_help_text
				exit
				;;
			--*)
				;&
			-*)
				abort "'$argument' is not a supported option"
				;;
			*)
				abort "'$argument' is not a valid argument"
				;;
		esac
	done

	#Ensure the repository has at least one commit
	if git rev-parse --verify HEAD >/dev/null 2>&1
	then
		against=HEAD
	else
		against=$( git hash-object -t tree < /dev/null )
	fi

	whitespace_error_check
	script_error_check
    erc_error_check
    drc_error_check
}

main "$@"
